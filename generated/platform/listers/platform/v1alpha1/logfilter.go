/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/platform/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogFilterLister helps list LogFilters.
// All objects returned here must be treated as read-only.
type LogFilterLister interface {
	// List lists all LogFilters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogFilter, err error)
	// LogFilters returns an object that can list and get LogFilters.
	LogFilters(namespace string) LogFilterNamespaceLister
	LogFilterListerExpansion
}

// logFilterLister implements the LogFilterLister interface.
type logFilterLister struct {
	indexer cache.Indexer
}

// NewLogFilterLister returns a new LogFilterLister.
func NewLogFilterLister(indexer cache.Indexer) LogFilterLister {
	return &logFilterLister{indexer: indexer}
}

// List lists all LogFilters in the indexer.
func (s *logFilterLister) List(selector labels.Selector) (ret []*v1alpha1.LogFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogFilter))
	})
	return ret, err
}

// LogFilters returns an object that can list and get LogFilters.
func (s *logFilterLister) LogFilters(namespace string) LogFilterNamespaceLister {
	return logFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogFilterNamespaceLister helps list and get LogFilters.
// All objects returned here must be treated as read-only.
type LogFilterNamespaceLister interface {
	// List lists all LogFilters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogFilter, err error)
	// Get retrieves the LogFilter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogFilter, error)
	LogFilterNamespaceListerExpansion
}

// logFilterNamespaceLister implements the LogFilterNamespaceLister
// interface.
type logFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogFilters in the indexer for a given namespace.
func (s logFilterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogFilter))
	})
	return ret, err
}

// Get retrieves the LogFilter from the indexer for a given namespace and name.
func (s logFilterNamespaceLister) Get(name string) (*v1alpha1.LogFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logfilter"), name)
	}
	return obj.(*v1alpha1.LogFilter), nil
}
