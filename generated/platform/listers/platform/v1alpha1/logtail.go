/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/api/platform/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogTailLister helps list LogTails.
// All objects returned here must be treated as read-only.
type LogTailLister interface {
	// List lists all LogTails in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogTail, err error)
	// LogTails returns an object that can list and get LogTails.
	LogTails(namespace string) LogTailNamespaceLister
	LogTailListerExpansion
}

// logTailLister implements the LogTailLister interface.
type logTailLister struct {
	indexer cache.Indexer
}

// NewLogTailLister returns a new LogTailLister.
func NewLogTailLister(indexer cache.Indexer) LogTailLister {
	return &logTailLister{indexer: indexer}
}

// List lists all LogTails in the indexer.
func (s *logTailLister) List(selector labels.Selector) (ret []*v1alpha1.LogTail, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogTail))
	})
	return ret, err
}

// LogTails returns an object that can list and get LogTails.
func (s *logTailLister) LogTails(namespace string) LogTailNamespaceLister {
	return logTailNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogTailNamespaceLister helps list and get LogTails.
// All objects returned here must be treated as read-only.
type LogTailNamespaceLister interface {
	// List lists all LogTails in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogTail, err error)
	// Get retrieves the LogTail from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogTail, error)
	LogTailNamespaceListerExpansion
}

// logTailNamespaceLister implements the LogTailNamespaceLister
// interface.
type logTailNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogTails in the indexer for a given namespace.
func (s logTailNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogTail, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogTail))
	})
	return ret, err
}

// Get retrieves the LogTail from the indexer for a given namespace and name.
func (s logTailNamespaceLister) Get(name string) (*v1alpha1.LogTail, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logtail"), name)
	}
	return obj.(*v1alpha1.LogTail), nil
}
