/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/platform/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunbookLister helps list Runbooks.
// All objects returned here must be treated as read-only.
type RunbookLister interface {
	// List lists all Runbooks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Runbook, err error)
	// Runbooks returns an object that can list and get Runbooks.
	Runbooks(namespace string) RunbookNamespaceLister
	RunbookListerExpansion
}

// runbookLister implements the RunbookLister interface.
type runbookLister struct {
	indexer cache.Indexer
}

// NewRunbookLister returns a new RunbookLister.
func NewRunbookLister(indexer cache.Indexer) RunbookLister {
	return &runbookLister{indexer: indexer}
}

// List lists all Runbooks in the indexer.
func (s *runbookLister) List(selector labels.Selector) (ret []*v1alpha1.Runbook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Runbook))
	})
	return ret, err
}

// Runbooks returns an object that can list and get Runbooks.
func (s *runbookLister) Runbooks(namespace string) RunbookNamespaceLister {
	return runbookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RunbookNamespaceLister helps list and get Runbooks.
// All objects returned here must be treated as read-only.
type RunbookNamespaceLister interface {
	// List lists all Runbooks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Runbook, err error)
	// Get retrieves the Runbook from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Runbook, error)
	RunbookNamespaceListerExpansion
}

// runbookNamespaceLister implements the RunbookNamespaceLister
// interface.
type runbookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Runbooks in the indexer for a given namespace.
func (s runbookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Runbook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Runbook))
	})
	return ret, err
}

// Get retrieves the Runbook from the indexer for a given namespace and name.
func (s runbookNamespaceLister) Get(name string) (*v1alpha1.Runbook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runbook"), name)
	}
	return obj.(*v1alpha1.Runbook), nil
}
