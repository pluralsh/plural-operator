/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/platform/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegistryCredentialLister helps list RegistryCredentials.
// All objects returned here must be treated as read-only.
type RegistryCredentialLister interface {
	// List lists all RegistryCredentials in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryCredential, err error)
	// RegistryCredentials returns an object that can list and get RegistryCredentials.
	RegistryCredentials(namespace string) RegistryCredentialNamespaceLister
	RegistryCredentialListerExpansion
}

// registryCredentialLister implements the RegistryCredentialLister interface.
type registryCredentialLister struct {
	indexer cache.Indexer
}

// NewRegistryCredentialLister returns a new RegistryCredentialLister.
func NewRegistryCredentialLister(indexer cache.Indexer) RegistryCredentialLister {
	return &registryCredentialLister{indexer: indexer}
}

// List lists all RegistryCredentials in the indexer.
func (s *registryCredentialLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryCredential, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryCredential))
	})
	return ret, err
}

// RegistryCredentials returns an object that can list and get RegistryCredentials.
func (s *registryCredentialLister) RegistryCredentials(namespace string) RegistryCredentialNamespaceLister {
	return registryCredentialNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegistryCredentialNamespaceLister helps list and get RegistryCredentials.
// All objects returned here must be treated as read-only.
type RegistryCredentialNamespaceLister interface {
	// List lists all RegistryCredentials in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryCredential, err error)
	// Get retrieves the RegistryCredential from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegistryCredential, error)
	RegistryCredentialNamespaceListerExpansion
}

// registryCredentialNamespaceLister implements the RegistryCredentialNamespaceLister
// interface.
type registryCredentialNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegistryCredentials in the indexer for a given namespace.
func (s registryCredentialNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryCredential, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryCredential))
	})
	return ret, err
}

// Get retrieves the RegistryCredential from the indexer for a given namespace and name.
func (s registryCredentialNamespaceLister) Get(name string) (*v1alpha1.RegistryCredential, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registrycredential"), name)
	}
	return obj.(*v1alpha1.RegistryCredential), nil
}
