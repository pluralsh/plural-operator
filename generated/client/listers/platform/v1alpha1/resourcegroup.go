/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/platform/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceGroupLister helps list ResourceGroups.
// All objects returned here must be treated as read-only.
type ResourceGroupLister interface {
	// List lists all ResourceGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceGroup, err error)
	// ResourceGroups returns an object that can list and get ResourceGroups.
	ResourceGroups(namespace string) ResourceGroupNamespaceLister
	ResourceGroupListerExpansion
}

// resourceGroupLister implements the ResourceGroupLister interface.
type resourceGroupLister struct {
	indexer cache.Indexer
}

// NewResourceGroupLister returns a new ResourceGroupLister.
func NewResourceGroupLister(indexer cache.Indexer) ResourceGroupLister {
	return &resourceGroupLister{indexer: indexer}
}

// List lists all ResourceGroups in the indexer.
func (s *resourceGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceGroup))
	})
	return ret, err
}

// ResourceGroups returns an object that can list and get ResourceGroups.
func (s *resourceGroupLister) ResourceGroups(namespace string) ResourceGroupNamespaceLister {
	return resourceGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceGroupNamespaceLister helps list and get ResourceGroups.
// All objects returned here must be treated as read-only.
type ResourceGroupNamespaceLister interface {
	// List lists all ResourceGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceGroup, err error)
	// Get retrieves the ResourceGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceGroup, error)
	ResourceGroupNamespaceListerExpansion
}

// resourceGroupNamespaceLister implements the ResourceGroupNamespaceLister
// interface.
type resourceGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceGroups in the indexer for a given namespace.
func (s resourceGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceGroup))
	})
	return ret, err
}

// Get retrieves the ResourceGroup from the indexer for a given namespace and name.
func (s resourceGroupNamespaceLister) Get(name string) (*v1alpha1.ResourceGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourcegroup"), name)
	}
	return obj.(*v1alpha1.ResourceGroup), nil
}
