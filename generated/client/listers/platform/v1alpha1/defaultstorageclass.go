/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/platform/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DefaultStorageClassLister helps list DefaultStorageClasses.
// All objects returned here must be treated as read-only.
type DefaultStorageClassLister interface {
	// List lists all DefaultStorageClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultStorageClass, err error)
	// DefaultStorageClasses returns an object that can list and get DefaultStorageClasses.
	DefaultStorageClasses(namespace string) DefaultStorageClassNamespaceLister
	DefaultStorageClassListerExpansion
}

// defaultStorageClassLister implements the DefaultStorageClassLister interface.
type defaultStorageClassLister struct {
	indexer cache.Indexer
}

// NewDefaultStorageClassLister returns a new DefaultStorageClassLister.
func NewDefaultStorageClassLister(indexer cache.Indexer) DefaultStorageClassLister {
	return &defaultStorageClassLister{indexer: indexer}
}

// List lists all DefaultStorageClasses in the indexer.
func (s *defaultStorageClassLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultStorageClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultStorageClass))
	})
	return ret, err
}

// DefaultStorageClasses returns an object that can list and get DefaultStorageClasses.
func (s *defaultStorageClassLister) DefaultStorageClasses(namespace string) DefaultStorageClassNamespaceLister {
	return defaultStorageClassNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DefaultStorageClassNamespaceLister helps list and get DefaultStorageClasses.
// All objects returned here must be treated as read-only.
type DefaultStorageClassNamespaceLister interface {
	// List lists all DefaultStorageClasses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultStorageClass, err error)
	// Get retrieves the DefaultStorageClass from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DefaultStorageClass, error)
	DefaultStorageClassNamespaceListerExpansion
}

// defaultStorageClassNamespaceLister implements the DefaultStorageClassNamespaceLister
// interface.
type defaultStorageClassNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DefaultStorageClasses in the indexer for a given namespace.
func (s defaultStorageClassNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultStorageClass, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultStorageClass))
	})
	return ret, err
}

// Get retrieves the DefaultStorageClass from the indexer for a given namespace and name.
func (s defaultStorageClassNamespaceLister) Get(name string) (*v1alpha1.DefaultStorageClass, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("defaultstorageclass"), name)
	}
	return obj.(*v1alpha1.DefaultStorageClass), nil
}
