/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/platform/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationOverlayLister helps list ConfigurationOverlays.
// All objects returned here must be treated as read-only.
type ConfigurationOverlayLister interface {
	// List lists all ConfigurationOverlays in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationOverlay, err error)
	// ConfigurationOverlays returns an object that can list and get ConfigurationOverlays.
	ConfigurationOverlays(namespace string) ConfigurationOverlayNamespaceLister
	ConfigurationOverlayListerExpansion
}

// configurationOverlayLister implements the ConfigurationOverlayLister interface.
type configurationOverlayLister struct {
	indexer cache.Indexer
}

// NewConfigurationOverlayLister returns a new ConfigurationOverlayLister.
func NewConfigurationOverlayLister(indexer cache.Indexer) ConfigurationOverlayLister {
	return &configurationOverlayLister{indexer: indexer}
}

// List lists all ConfigurationOverlays in the indexer.
func (s *configurationOverlayLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationOverlay, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationOverlay))
	})
	return ret, err
}

// ConfigurationOverlays returns an object that can list and get ConfigurationOverlays.
func (s *configurationOverlayLister) ConfigurationOverlays(namespace string) ConfigurationOverlayNamespaceLister {
	return configurationOverlayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationOverlayNamespaceLister helps list and get ConfigurationOverlays.
// All objects returned here must be treated as read-only.
type ConfigurationOverlayNamespaceLister interface {
	// List lists all ConfigurationOverlays in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationOverlay, err error)
	// Get retrieves the ConfigurationOverlay from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigurationOverlay, error)
	ConfigurationOverlayNamespaceListerExpansion
}

// configurationOverlayNamespaceLister implements the ConfigurationOverlayNamespaceLister
// interface.
type configurationOverlayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationOverlays in the indexer for a given namespace.
func (s configurationOverlayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationOverlay, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationOverlay))
	})
	return ret, err
}

// Get retrieves the ConfigurationOverlay from the indexer for a given namespace and name.
func (s configurationOverlayNamespaceLister) Get(name string) (*v1alpha1.ConfigurationOverlay, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationoverlay"), name)
	}
	return obj.(*v1alpha1.ConfigurationOverlay), nil
}
