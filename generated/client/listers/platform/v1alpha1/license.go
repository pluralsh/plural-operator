/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/platform/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LicenseLister helps list Licenses.
// All objects returned here must be treated as read-only.
type LicenseLister interface {
	// List lists all Licenses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.License, err error)
	// Licenses returns an object that can list and get Licenses.
	Licenses(namespace string) LicenseNamespaceLister
	LicenseListerExpansion
}

// licenseLister implements the LicenseLister interface.
type licenseLister struct {
	indexer cache.Indexer
}

// NewLicenseLister returns a new LicenseLister.
func NewLicenseLister(indexer cache.Indexer) LicenseLister {
	return &licenseLister{indexer: indexer}
}

// List lists all Licenses in the indexer.
func (s *licenseLister) List(selector labels.Selector) (ret []*v1alpha1.License, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.License))
	})
	return ret, err
}

// Licenses returns an object that can list and get Licenses.
func (s *licenseLister) Licenses(namespace string) LicenseNamespaceLister {
	return licenseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LicenseNamespaceLister helps list and get Licenses.
// All objects returned here must be treated as read-only.
type LicenseNamespaceLister interface {
	// List lists all Licenses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.License, err error)
	// Get retrieves the License from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.License, error)
	LicenseNamespaceListerExpansion
}

// licenseNamespaceLister implements the LicenseNamespaceLister
// interface.
type licenseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Licenses in the indexer for a given namespace.
func (s licenseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.License, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.License))
	})
	return ret, err
}

// Get retrieves the License from the indexer for a given namespace and name.
func (s licenseNamespaceLister) Get(name string) (*v1alpha1.License, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("license"), name)
	}
	return obj.(*v1alpha1.License), nil
}
