/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/vpn/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WireguardPeerLister helps list WireguardPeers.
// All objects returned here must be treated as read-only.
type WireguardPeerLister interface {
	// List lists all WireguardPeers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WireguardPeer, err error)
	// WireguardPeers returns an object that can list and get WireguardPeers.
	WireguardPeers(namespace string) WireguardPeerNamespaceLister
	WireguardPeerListerExpansion
}

// wireguardPeerLister implements the WireguardPeerLister interface.
type wireguardPeerLister struct {
	indexer cache.Indexer
}

// NewWireguardPeerLister returns a new WireguardPeerLister.
func NewWireguardPeerLister(indexer cache.Indexer) WireguardPeerLister {
	return &wireguardPeerLister{indexer: indexer}
}

// List lists all WireguardPeers in the indexer.
func (s *wireguardPeerLister) List(selector labels.Selector) (ret []*v1alpha1.WireguardPeer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WireguardPeer))
	})
	return ret, err
}

// WireguardPeers returns an object that can list and get WireguardPeers.
func (s *wireguardPeerLister) WireguardPeers(namespace string) WireguardPeerNamespaceLister {
	return wireguardPeerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WireguardPeerNamespaceLister helps list and get WireguardPeers.
// All objects returned here must be treated as read-only.
type WireguardPeerNamespaceLister interface {
	// List lists all WireguardPeers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WireguardPeer, err error)
	// Get retrieves the WireguardPeer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WireguardPeer, error)
	WireguardPeerNamespaceListerExpansion
}

// wireguardPeerNamespaceLister implements the WireguardPeerNamespaceLister
// interface.
type wireguardPeerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WireguardPeers in the indexer for a given namespace.
func (s wireguardPeerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WireguardPeer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WireguardPeer))
	})
	return ret, err
}

// Get retrieves the WireguardPeer from the indexer for a given namespace and name.
func (s wireguardPeerNamespaceLister) Get(name string) (*v1alpha1.WireguardPeer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("wireguardpeer"), name)
	}
	return obj.(*v1alpha1.WireguardPeer), nil
}
