/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/plural-operator/apis/vpn/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WireguardServerLister helps list WireguardServers.
// All objects returned here must be treated as read-only.
type WireguardServerLister interface {
	// List lists all WireguardServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WireguardServer, err error)
	// WireguardServers returns an object that can list and get WireguardServers.
	WireguardServers(namespace string) WireguardServerNamespaceLister
	WireguardServerListerExpansion
}

// wireguardServerLister implements the WireguardServerLister interface.
type wireguardServerLister struct {
	indexer cache.Indexer
}

// NewWireguardServerLister returns a new WireguardServerLister.
func NewWireguardServerLister(indexer cache.Indexer) WireguardServerLister {
	return &wireguardServerLister{indexer: indexer}
}

// List lists all WireguardServers in the indexer.
func (s *wireguardServerLister) List(selector labels.Selector) (ret []*v1alpha1.WireguardServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WireguardServer))
	})
	return ret, err
}

// WireguardServers returns an object that can list and get WireguardServers.
func (s *wireguardServerLister) WireguardServers(namespace string) WireguardServerNamespaceLister {
	return wireguardServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WireguardServerNamespaceLister helps list and get WireguardServers.
// All objects returned here must be treated as read-only.
type WireguardServerNamespaceLister interface {
	// List lists all WireguardServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WireguardServer, err error)
	// Get retrieves the WireguardServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WireguardServer, error)
	WireguardServerNamespaceListerExpansion
}

// wireguardServerNamespaceLister implements the WireguardServerNamespaceLister
// interface.
type wireguardServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WireguardServers in the indexer for a given namespace.
func (s wireguardServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WireguardServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WireguardServer))
	})
	return ret, err
}

// Get retrieves the WireguardServer from the indexer for a given namespace and name.
func (s wireguardServerNamespaceLister) Get(name string) (*v1alpha1.WireguardServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("wireguardserver"), name)
	}
	return obj.(*v1alpha1.WireguardServer), nil
}
